#summary Instructions for including Silenus in your own project.

= Installation =

Download silenus.jar and add it to your build path. It has no external dependencies. You can look at the [http://code.google.com/p/silenus/source/browse/#svn%2Ftrunk%2Fsilenus-java silenus-java source code] to get a general idea of how to use Silenus. Continue reading for detailed instructions.


= Use =

the XFLDocument class is the enry point to the framework. In order to set up, parse and animate an XFL document (or CS5 FLA file), follow these steps:

 # Create an *XFLDocument* object.
 # (optional) Assign an alternative *XMLUtility* for parsing XML files - can be used to override the default XML parser from javax.xml that is used.
 # (optional) Assign an alternative *StreamFactory*. This can be used to change the way *XFLDocument* stores the files expanded from the FLA file, and how the converted PNG's are saved. By default, *XFLDocument* will create all the files in the directory where the FLA can be found. See the section below for expanding in memory.
 # Call _parseXFL('/path/to/file.fla')_ to unzip file.fla, convert the binary images to png and store everything in the /path/to directory. _Call parseXFL('/path/to/xfl/dir')_ to read the uncompressed XFL directory (if the .fla was unzipped by the user before, or if the flash document was saved with the 'save as uncompressed XFL' option).
 # *XFLDocument* now contains everything you need to reproduce the animation. You can walk through the data yourself with the getters, or use *SceneRenderer* coupled with a *RenderInterface* of your choosing to render one of the scenes in your document to screen. This is done by first implementing *RenderInterface*, or by using two of the provided implementations (*JavaRenderer*, which uses the java.awt.Graphics package, or *RawDataRenderer*, which outputs serialiable and exportable data for the entire animation). You pass a *Timeline* (internal flash terminology for scene) object and a *RenderInterface* to the constructor of *SceneRenderer*, and *SceneRenderer* will then render a frame by calling _render(frameNumber)_.


This is all there is to animating a flash file using Silenus.


= Use Silenus as an export tool =

By using the *RawDataRenderer*, you can acquire an *AnimationData* object, which has a _getJSON()_ function that can be called to get a full JSON representation of all the frames in the animation, and all the bitmap used within.

The following code example will do this:

{{{
XFLDocument doc = new XFLDocument();
doc.parseXFL("file.fla");
RawDataRenderer renderer = new RawDataRenderer(doc.getScene(), doc.getWidth(), doc.getHeight(), doc.getFrameRate()); // renders the entire animation once in the constructor
String json = renderer.getAnimationData().getJSON();
}}}


= Use Silenus without writing to the file system =